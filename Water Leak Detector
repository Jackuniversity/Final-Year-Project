/* USER CODE BEGIN Header */
/**
 * https://wiki.dfrobot.com/WiFi_IoT_Module_SKU_TEL0126
 *https://github.com/STMicroelectronics/stm32l4xx_hal_driver/blob/master/Inc/stm32l4xx_hal_usart.h
 * https://www.farnell.com/datasheets/3216228.pdf
 * https://github.com/DFRobot/DFRobot_WIFI_I0T_Module_STM32
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//#include "DFRobot_wifi_iot.h"
//#include "DFRobot_queue.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define WIFISSID "JacksiPhone"
#define WIFIPWS      "[PASSWORD]"
#define ADC_BUF_SIZE 8
#define MICROPHONE_BUF_SIZE 8
#define __VREFANALOG_VOLTAGE__ 3300
#define DOT 100
#define DASH 250
#define SPACE 50
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
char *splitdata[5];
uint16_t ADC_buffer[ADC_BUF_SIZE];
uint16_t Microphone_buffer[MICROPHONE_BUF_SIZE];
uint8_t flag=0;
uint8_t idx=0;

uint8_t tx_connect[100]="AT+CWJAP=\"JacksiPhone\",\"h3qYSsqVEFSC3FQg\"\r\n";
uint8_t tx_disconnect[100]="AT+CWQAP\r\n";
uint8_t tx_at[100]="AT\r\n";
uint8_t tx_isconnected[100]="AT+CIPSTATUS\r\n";

uint8_t rx_indx=0;
uint8_t rx_data[30];
uint8_t rx_buffer[30];
uint8_t transfer_cplt;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void connectWifi(const char *ssid , const char *pwd);
void splitString(void);
void WaterDetected(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */



  uint16_t AD_RES = 0;						//sensor buffer?
  float Sensor_final=0;
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);	//calibrate ADC
  HAL_UART_Receive_IT(&huart1, rx_data, 30);  //every 1 byte calls interrupt3
  HAL_GPIO_WritePin(LED_Source_GPIO_Port, LED_Source_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin, GPIO_PIN_RESET);
  //TIM2->CCMR1 = 50;
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, rx_data, 30);
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_UART_Transmit(&huart1, tx_isconnected, 100, HAL_MAX_DELAY);
	  //i send is connected to module. module will respond through an interrupt
	  HAL_Delay(1500);
	  //HAL_UART_Transmit(&huart1, tx_disconnect, 100, HAL_MAX_DELAY);


/*
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_connect, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_isconnected, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_disconnect, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_isconnected, 100, HAL_MAX_DELAY);
*/




	  //HAL_UART_Transmit(&huart1, tx_at, 100, HAL_MAX_DELAY);


	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1);
	  AD_RES = HAL_ADC_GetValue(&hadc1);
	  AD_RES=(AD_RES>>4);
	  //Sensor_final=AD_RES*0.74133; //give answer in mV
	  //Sensor_final=AD_RES*0.81176095;
	  //Sensor_final=AD_RES*0.79499218;
	  //Sensor_final=AD_RES*0.80176768;

	  //Sensor_final=AD_RES*0.81185567;			//normalise to mV
	  //Sensor_final=AD_RES*0.1777522936;


	  HAL_Delay(500);
	  if (Sensor_final<3000){


		  WaterDetected();

		  //HAL_GPIO_WritePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin, GPIO_PIN_SET);
	  	  	//HAL_Delay(500000);
	  	  	//HAL_GPIO_WritePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin, GPIO_PIN_RESET);
	  }




	  /*{
		  for(idx=0;idx<ADC_BUF_SIZE;idx++)
		  {
			  ADC_buffer[idx]=__LL_ADC_CALC_TEMPERATURE
					  (__VREFANALOG_VOLTAGE__,ADC_buffer[idx],LL_ADC_RESOLUTION_12B);
		  }
		  flag=0;
		  //HAL_UART_Transmit(&huart1, (uint8_t*)ADC_buffer, 12, 1000);
		  //for(int i =0; i<ADC_BUF_SIZE;i++)
			  //printf("%d",ADC_buffer[i]);
	  }*/


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15999;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 16-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 208-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Source_Pin|Buzzer_Source_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Source_Pin Buzzer_Source_Pin */
  GPIO_InitStruct.Pin = LED_Source_Pin|Buzzer_Source_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */


  //put code I want excecuted on recieve
  //NONE OF THIS IS MY CODE I WILL NEED TO EDIT IT
  /*uint8_t i;
  if(huart->Instance==USART2)
  {
	  if(rx_indx==0){
		  for(i=0;i<100;i++)
			  rx_buffer[i]=0;
		  HAL_GPIO_WritePin(GPIOA, GPIO_Pin_5, GPIO_PIN_RESET);
	  }
  	  if(rx_data[0]!=13){
  		  rx_buffer[rx_indx++]=rx_data[0];
  	  }else{
  		  rx_indx=0;
  		  transfercplt=1;
  		  HAL_UART_Transmit(&huart1, "\n\r", 2, 100);
  		  if(!strcmp(rx_buffer,"LED ON"));
  		  {
  			  HAL_GPIO_WritePin(GPIOx, GPIO_Pin_5, GPIO_PIN_SET);
  		  }
  	  }
  HAL_UART_Receive_IT(&huart1, rx_data, 1);
  HAL_UART_Transmit(&huart1, rx_data, strlen(rx_data), 100);
  }
}

	  HAL_UART_Transmit(&huart1, tx_connect, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_isconnected, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_disconnect, 100, HAL_MAX_DELAY);
	  HAL_Delay(15000);
	  HAL_UART_Transmit(&huart1, tx_isconnected, 100, HAL_MAX_DELAY);



*/

  const char *alreadyconnected = "AT+CIPSTATUS\r\nSTATUS:2\r\n\r\nOK\r\n";
  const char *notconnected = "AT+CIPSTATUS\r\nSTATUS:5\r\n\r\nOK\r\n";
  //if(huart->Instance==USART2)
  //{
	  if(rx_indx==0){
		  for(uint8_t i=0;i<30;i++)
			  rx_buffer[i]=0;
		  //HAL_GPIO_WritePin(GPIOA, GPIO_Pin_5, GPIO_PIN_RESET);
	  }
	  if(rx_data[0]=='A'){
		  for(rx_indx=0;rx_indx<30;rx_indx++)
			  rx_buffer[rx_indx]=rx_data[rx_indx];

		  if(strcmp(rx_buffer, alreadyconnected)==0)
		  {
		    			//Already connected
		}
		  else if(strcmp(rx_buffer, notconnected)==0)
		  {
			  HAL_UART_Transmit(&huart1, tx_connect, 100, HAL_MAX_DELAY);
		  }
		  else
		  {
		    			//error has occured
			  }
		  rx_indx=0;
		  transfer_cplt=1;
	 }
	  else{
		  //wrong AT command recieved / error occured
	  }
  HAL_UART_Receive_IT(&huart1, rx_data, 30);    // Enable interrupt-driven reception of UART data
}

void WaterDetected(void){

	HAL_GPIO_WritePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin, GPIO_PIN_SET);
	HAL_Delay(DOT);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DASH);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DASH);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DOT);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DASH);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DASH);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DOT);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DOT);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DASH);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(SPACE);

	HAL_GPIO_TogglePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin);
	HAL_Delay(DOT);

	HAL_GPIO_WritePin(Buzzer_Source_GPIO_Port, Buzzer_Source_Pin, GPIO_PIN_RESET);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
